/* MACRO %RenameVars
Version: 	1.05
Author: 	Daniel Mastropietro
Created: 	09-Sep-2005
Modified: 	04-Aug-2016 (previous: 15-Oct-2015) (remove variables not found in input dataset)

DESCRIPTION:
This macro renames variables in a dataset.
The rename information is taken either from a SAS table or from an external file (CSV, TXT, worksheet)
containing two columns, one with the list of the old names and the other with the list
of the new names of the variables to be renamed.

USAGE:
%RenameVars(
	data,			*** Input dataset where the rename is to be carried out
	rename=,		*** Name of the dataset containing the rename information
	import=0,		*** Whether to import the rename information from the file specified in FILE=
	file=,			*** Name of the file to be imported containing the rename information
	type=CSV,		*** Type of file specified in FILE=
	old=old,		*** Name of the variable in dataset RENAME= containing the old variable names
	new=new,		*** Name of the variable in dataset RENAME= containing the new variable names
	checkrepeated=0,*** Whether to check for repeated names in the NEW variable names
	norepeated=,	*** (DEPRECATED) Use CHECKREPEATED instead; norepeated=1 is equivalent to checkrepeated=0
	notes=0,		*** Show SAS notes in the log?
	log=1);			*** Show messages in the log?

REQUIRED PARAMETERS:
- data:			Input dataset where the rename is to be carried out.
				Data options CANNOT be specified.

OPTIONAL PARAMETERS:
- rename:		Name of the dataset containing the rename information.
				This dataset either exists or is created by importing the rename information
				from the file specified in FILE=.
				The dataset must have at least 2 columns, containing the old (current) variable
				names and the new vavriable names to be assigned.
				If a variable does not have to be renamed, it can still appear in the dataset.
				In such cases, the new name must be either empty or the same as the current
				name of the variable.
				Also variables that do not exist in the input dataset can appear among the old
				variable names. The variable is simply ignored in such case.
				The names of the columns containing the old (current) variable names and the
				new variable names are specified in parameters OLD= and NEW= respectively.
				See below.
				default: _RENAME_

- import:		Whether to import the rename information from the file specified in FILE=
				or take the information from the dataset specified in RENAME=.
				Possible values: 0 => Take the information from the dataset RENAME=
								 1 => Import the information from the file FILE=
				default: 0

- file:			External file from which the old and new names are read.
				The name must be enclosed in quotes.

- type:			Type of the external file (e.g. CSV).

- old:			Name of the variable in the RENAME= dataset containing the list of the old
				(current) variable names.
				default: old

- new:			Name of the variable in the RENAME= dataset containing the list of the new
				variable names.
				default: new

- checkrepeated:Whether to check for repeated values in the list of NEW variable names.
				Possible values: 0 => Do not check for repeated names in the NEW variable names list
								 1 => Check for repeated names in the NEW variable names list and show
									  a warning message if there are, indicating the number of repeated
								 	  names that were found.
				WARNING: when CHECKREPEATED=1, the process may take a long time if the number of variables
				to be renamed is large (say larger than 50) because the check for repeated names
				is time consuming.
				NOTE: if there are repeated values in the OLD variable names, the rename corresponding
				to the FIRST occurrence of the OLD variable name is taken.
				default: 0

- notes:		Show SAS notes in the log?
				Possible values: 0 => No, 1 => Yes
				default: 0

- log:			Show messages in the log?
				Possible values: 0 => No, 1 => Yes
				default: 1

NOTES:
1.- The old and new names are stored in an external file that is imported. This file can
be Excel, CSV or TXT.
This file is typically generated by exporting to Excel the information produced by a
PROC CONTENTS run on the dataset of interest and then editing this informataion in Excel
to define the new variable names.

2.- Repeated values in the OLD variable names are removed by keeping the first occurrence
that appears in the rename dataset.

2.- Even if NOTES=0, SAS notes generated by the PROC DATASETS used to rename the variables
are shown.

OTHER MACROS AND MODULES USED IN THIS MACRO:
- %CreateInteractions
- %GetLibraryName
- %GetNroElements
- %Import
- %MakeList
- %MakeListFromVar
- %Puts
- %RemoveRepeated
- %RemoveSuffix
- %ResetSASOptions
- %SetSASOptions
*/
%MACRO RenameVars(	data,
					rename=_rename_,
					import=0,
					file=, 
					type=CSV,
					old=old,
					new=new,
					norepeated=,		/* Kept for backward compatibility */
					checkrepeated=0,
					notes=0,
					log=1) / des="Renames variables in a dataset as specified in a table stored in an external file or in a dataset";
%local oldlist newlist newlist_norep;
%local nro_newlist nro_newlist_norep;
%local data_name library;
%local renamedat renamestr_new _rename_;
%local foundRepeated;
%local notes_option;
%local varlist;

%SetSASOptions(notes=&notes);

%if &log %then %do;
	%put;
	%put RENAMEVARS: Macro starts;
	%put;
%end;

%*** Parse input parameters;
%*** NOREPEATED (for backward compatibility);
%if %quote(&norepeated) ~= %then
	%let checkrepeated = ~&norepeated;

%* Read file with old and new names;
%if &import %then %do;
	%put RENAMEVARS: Importing the rename information from;
	%put RENAMEVARS: &file of type %upcase(&type)...;
	%Import(&rename, &file, type=&type);
%end;
%let renamedat = &rename;

%if %quote(&renamedat) = %then %do;
	%put RENAMEVARS: ERROR - No rename information was specified.;
	%put RENAMEVARS: Either the RENAME= parameter or IMPORT=1 and the FILE= paramater must be passed.;
%end;
%else %if not %sysfunc(exist(&renamedat)) %then
	%put RENAMEVARS: ERROR - Dataset %upcase(&renamedat) with the rename information does not exist.;
%else %do;
	%* Read old and new names after removing duplicate values in the OLD names to avoid matching problems
	%* between old and new names below when keeping the old names present in the input dataset;
	%if &log %then %do;
		%put RENAMEVARS: Reading the old and the new names from dataset %upcase(&renamedat)...;
		%put RENAMEVARS: Reading variables in the input dataset...;
	%end;
	proc sort data=&renamedat out=_rv_rename_ nodupkey;
		by &old;
		where not missing(&old) and not missing(&new) and upcase(&old) ~= upcase(&new);
	run;
	%* Keep just the names in OLDLIST that are also present in the input dataset;
	proc contents data=&data out=_rv_contents_ noprint;
	run;
	%let varlist = %MakeListFromVar(_rv_contents_, var=name, log=0);
	%let oldlist = %MakeListFromVar(_rv_rename_, var=&old, log=0);
	%let oldlist = %KeepInList(&oldlist, &varlist, log=0);

	%if %quote(&oldlist) = %then %do;
		%if &log %then
			%put RENAMEVARS: No variables to rename were found in the input dataset.;
	%end;
	%else %do;
		%* Read the NEW names matching the OLD names;
		data _rv_rename_;
			set _rv_rename_;
			where &old in (%quote(")%MakeList(&oldlist, sep=%quote(", "), nospace=1)%quote("));
		run;
		%let newlist = %MakeListFromVar(_rv_rename_, var=&new, log=0);

		%* Build the RENAME strings;
		%* Note that the separator used is the semicolon. This is to enable showing in the logs what renames 
		%* are going to be carried out by leaving a space before and after the = sign, for better readability
		%* of the old and new names of the variables;
		%if &log %then
			%put RENAMEVARS: Creating the rename strings...;
		%CreateInteractions(var=&oldlist, with=&newlist, join=%quote( = ), allInteractions=0, sep=;, macrovar=renamestr, log=0);
		%if &log %then %do;
			%put RENAMEVARS: The following is the list of renames to be applied:;
			%puts(%quote(&renamestr), sep=;);
			%put;
		%end;

		%* If CHECKREPEATED=1 check whether there are repeated names in the NEW variable name list (this parameter is taken into
		%* account before doing this check because the RemoveRepeated macro may take too long if there are too
		%* many names);
		%let foundRepeated = 0;
		%if &checkrepeated %then %do;
			%if &log %then
				%put RENAMEVARS: Checking if there are any repeated names among the NEW variable names...;
			%let newlist_norep = %RemoveRepeated(&newlist, log=0);
			%let nro_newlist_norep = %GetNroElements(&newlist_norep);
			%let nro_newlist = %GetNroElements(&newlist);
			%if &nro_newlist_norep < &nro_newlist %then %do;
				%let foundRepeated = 1;
				%put RENAMEVARS: WARNING - Some of the new variable names are repeated.;
				%put RENAMEVARS: The rename process will only work for the OLD variable matching the first occurrence of the NEW name.;
				%put RENAMEVARS: Please check the output dataset.;
				%put RENAMEVARS: The number of repeated variable names is %eval(&nro_newlist - &nro_newlist_norep).;
			%end;
			%else
				%put RENAMEVARS: No repeated NEW variable names found.;
		%end;

		%*** RENAME;
		%let library = %GetLibraryName(&data);
		%if %index(&data, .) %then
			%let data_name = %scan(&data, 2, '.');
		%else
			%let data_name = &data;
		%if &foundRepeated %then %do;
			%* Turn on the NOTES option when repeated names were found among the NEW variable names
			%* so that the user can see which variables are actually renamed.
			%* (this is useful because the rename process would most likely be interrupted when repeated target names exist);
			options notes;
		%end;
		proc datasets library=&library nolist;
			modify &data_name;
			%* The rename string created in &renamestr is changed by removing the semicolons after each NEW name
			%* so that when an error occurs when a NEW name is repeated the whole rename process does not stop but
			%* continues renaming the variables that can be renamed;
			rename %RemoveSuffix(%quote(&renamestr), ;, log=0);
		quit;
	%end;

	%* Cleanup;
	proc datasets nolist;
		delete 	_rv_contents_
				_rv_rename_;
	quit;
	options &notes_option;
%end;

%if &log %then %do;
	%put;
	%put RENAMEVARS: Macro ends;
	%put;
%end;

%ResetSASOptions;
%MEND RenameVars;
