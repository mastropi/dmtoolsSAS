/* MACRO %VariableImpact
Version: 	1.04
Author: 	Daniel Mastropietro
Created: 	30-Sep-2004
Modified: 	15-Feb-2016 (previous: 23-May-2015)

DESCRIPTION:
This macro makes plots of a binary target variable vs. individual predictor variables
in order to analyze their individual impact on the target.

The plots show either the proportion or the logit of the proportion of the event of
interest by groups of each predictor variable, created from its categorization.
(logit(p) = log(p/(1-p)))

An output dataset can be created to later produce the plots. Together with the output
dataset, an annotate dataset is created containing the necessary information to annotate
the plots, and a global macro variable (VI_GPLOT) is created with the statements necessary
to generate the plots in the future.

This is useful to decide possible transformations of the predictor variable prior to
fitting for example a logistic regression model.

USAGE:
%VariableImpact(
	data,			*** Input dataset.
	target=, 		*** Target binary variable.
	var=, 			*** List of predictor variables to analyze.
	event=1,		*** Event of interest for target variable.
	condition=,		*** Condition that the values of each predictor variable must satisfy
					***	in order to be included	in the analysis.
	value=mean, 	*** Value to use to categorize predictor variables.
	groups=10,		*** Nro. of groups to use in the categorization.
	groupsize=,		*** Size of each category.
	percentiles=,	*** Percentiles to use in the categorization.
	out=, 			*** Output dataset with the data necessary to produce the plots.
	plot=1,			*** Show the plots?
	plotWhat=logit,	*** What to plot: logit(p) or p.
	pointlabel=n,	*** Variable with the point labels to show in the graph.
	pointlabels=1,	*** Show point labels?
	lines=0,		*** Show lines connecting the points?
	bars=0,			*** Show horizontal and vertical error bars?
	barwidth=1,		*** Multiplier for the error bars.
	log=1);			*** Show messages in log?

REQUIRED PARAMETERS:
- data:				Input dataset. Data options can be specified as in a data= SAS option.

- target:			Target binary variable. It can be character or numeric.

- var:				List of predictor variables whose relation with TARGET= is plotted.
					For now, only numeric variables are allowed.

OPTIONAL PARAMETERS:
- event:			Value of the target variable representing the event of interest.

- condition:		Condition that each predictor variable must satisfy in order to be included
					in the analysis of its impact in the target variable.

- value:			Statistic keyword to use to compute the values representing each category.
					It can be any statistic keyword that is valid in PROC MEANS.
					If no value is specified, the different categories are
					represented with a natural number ranging from 1 to the number of groups.
					default: mean

- groups:			Nro. of groups into which each variable is categorized.
					The groups are defined by equally spaced percentiles, which are as many as
					the number of groups. For ex. if groups=5, then the percentiles that
					define the different categories are: 20 40 60 80 100.
					default: 10 (i.e. the percentiles used are 10 20 ... 100)

- groupsize:		Size of each category.
					This has prevalence over the options GROUPS= and PERCENTILES=, in the
					sense that if groupsize= is passed, GROUPS= and PERCENTILES= are ignored.
					default: (empty)

- percentiles:		List of percentiles to use to define the categories.
					It has prevalence over the variable GROUPS= in the sense that if
					percentiles= is passed, the option GROUPS= is ignored.
					default: (empty)

- out:				Output dataset with the data necessary to produce all the variable impact
					plots generated by this macro (one plot for each variable listed in VAR=).
					The output dataset contains the following columns:
					- VAR: name of each variable being analyzed.
					- VALUE: value of the variable indicated in column VAR as categorized to
					produce the plots.
					- P: proportion of 'event' present in each categorized value of the variable.
					- N: number of observations present in each categorized value of the variable.
					- P_LOWER: lower end of the error bar for P.
					- P_UPPER: upper end of the error bar for P. 
					- LOGIT: logit(P) = log(P/(1-P)).
					- LOGIT_LOWER: lower end of the error bar for logit(P).
					- LOGIT_UPPER: upper end of the error bar for logit(P).
					In addition, when this parameter is passed, the following is created:
					- An annotate dataset called <out>_anno, containing information used to annotate
					the plots.
					- A global macro variable called VI_GPLOT containing the PROC GPLOT statements
					necessary to produce all the variable impact plots generated by this macro in
					the future, using the output dataset and the annotate dataset.

- plot:				Whether to show the plot.
					Possible values: 0 => No, 1 => Yes.
					default: 1

- plotWhat:			What to plot in the vertical axis of the graphs, whether P, the
					proportion of EVENT= in variable TARGET= or Logit(P) = log(p/(1-p)).
					Possible values: LOGIT, P
					default: LOGIT

- pointlabel:		Variable name containing the point labels to show in the graphs.
					This option has an effect only if POINTLABELS=1.
					Possible values:
					n => # obs in each category
					p => Proportion of TARGET=EVENT in each category
					default: n

- pointlabels:		Show point labels in the graphs?
					Possible values: 0 => No, 1 => Yes.
					default: 1

- lines:			Whether to show lines connecting the points in the plot.
					Possible values: 0 => No, 1 => Yes.
					default: 0

- bars:				Whether to show horizontal and vertical error bars, as follows:
					- horizontal bars: min-max bars for the values of independent
					variable present each category of its categorized version.
					- vertical bars: error bars for the estimated probability (or logit
					of probability) for the event of interest (defined in EVENT=) 
					for each category of the independent variable being analyzed.
					When PLOTWHAT=p, the vertical error bars are computed as the
					(p +- barwidth*SE), where p is the estimated probability, barwidth is
					the value passed in BARWIDTH= and SE is the standard error of p.
					When PLOTWHAT=logit, the vertical error bars have the limits
					logit(p - barwidth*SE) and logit(p + barwidth*SE).
					Possible values: 0 => Do not show error bars, 1 => Show error bars.
					default: 0

- barwidth:			Multiplier for SE (standard error) used to compute the vertical error
					bars.
					default: 1

- log:				Show messages in log?
					Possible values: 0 => No, 1 => Yes.
					default: 1

OTHER MACROS AND MODULES USED IN THIS MACRO:
- %Categorize
- %CheckInputParameters
- %DefineSymbols
- %GetNroElements
- %GetStat
- %Means
- %RemoveRepeated
- %ResetSASOptions
- %SetAxis
- %SetSASOptions

SEE ALSO:
- %Categorize
- %TestLogisticFit

EXAMPLES:
1.- %VariableImpact(test, target=y, var=x1 x2, event='Paid', groups=20, plotWhat=p);
This plots the proportion of Y='Paid' in dataset TEST for each category of X1 and X2,
obtained from categorizing these variables in 20 groups.

2.- %VariableImpact(test, target=y, var=x z w, groupsize=40, pointlabel=p);
This plots log(p/(1-p)), where p is the proportion of Y=1 in dataset TEST for each
category of variables X, Z and W, obtained from categorizing these variables in
groups of size 40 (obs).

3.- %VariableImpact(test, target=y, var=x z w, out=test_vi, groupsize=40, plot=0);
This does the same thing as Example 2, with the difference that no plot is produced but rather
the dataset TEST_VI is generated containing the results of the analysis for each variable.
Each analysis is identified with the name of the variable under column VAR of the output
dataset.

APPLICATIONS:
This macro is useful during the preliminary steps of a logistic regression model in order
to analyze if a potentially predictive continuous variable needs to be transformed when
doing the logistic regression.
*/

/* PENDIENTE:
- (20/10/04) Agregar la posibilidad de que en el eje vertical se grafique una variable que
no sea dicotomica, sino que pueda ser continua, en cuyo caso se plotearia el valor promedio
de dicha variable para cada grupo de la variable x categorizada. (Esto surgio de una inquietud
de Chubert, con el fin de que haya menos puntos en el grafico de un grafico de continua vs. continua.)
- (18/11/04) Agregar un parametro que indique si alguna variable listada en VAR= es categorica
porque en tal caso no hay que usar los grupos indicados en GROUPS=. Para indicar que' variable
es categorica yo usaria el parametro CLASS= con la lista de variables categoricas, para ser
acorde con como lo hace SAS en los modelos de regresion por ejemplo.
- (18/11/04) Permitir que las variables listadas en VAR sean caracter. En tal caso, son
claramente categoricas.
- (13/5/05) Agregar una verificacion de que el numero de valores que puede tomar la variable
TARGET es 2, porque ahora todo lo que no sea TARGET=EVENT le asigna el valor 0 a la variable
auxiliar _TARGET_ creada en esta macro.
- (13/5/05) Agregar la opcion de solo mostrar las barras horizontales o solo mostrar las
barras verticales.
*/
&rsubmit;
%MACRO VariableImpact(	data,
						target=, 
						var=, 
						event=1,
						condition=,

						value=mean, 
						groups=10,
						groupsize=,
						percentiles=,

						out=,

						plot=1,
						plotWhat=logit,
						pointlabel=n,
						pointlabels=1,
						lines=0,
						bars=0,
						barwidth=1,

						log=1,
						help=0) / store des="Plots the impact of continuous variables on the logit of a dichotomous target variable";

/*----- Macro to display usage -----*/
%MACRO ShowMacroCall;
	%put VARIABLEIMPACT: The macro call is as follows:;
	%put %nrstr(%VariableImpact%();
	%put data , (REQUIRED) %quote(      *** Input dataset.);
	%put target= , (REQUIRED) %quote(   *** Target variable.);
	%put var= , (REQUIRED) %quote(      *** Predictor variables.);
	%put event=1 , %quote(              *** Event of interest.);
	%put condition= , %quote(           *** Condition required to include the value in the analysis.);
	%put value= , %nrquote(               *** Statistic to use to compute the values of the categories %(ex: mean, median%).);
	%put groups=10 , %quote(            *** Nro. of groups to use in the categorization.);
	%put groupsize= , %quote(           *** Size of each category.);
	%put percentiles= %quote(           *** Percentiles to use in the categorization.);
	%put out= , %quote(                 *** Output dataset with data necessary to produce the plots.);
	%put plot=1 , %quote(               *** Show the plots?);
	%put plotWhat=logit , %quote(       *** Plot logit(p) or p?);
	%put pointlabel=n, %quote(          *** Variable with the point labels to show in the graph);
	%put pointlabels=1, %quote(         *** Show point labels with nro. of obs?);
	%put lines=0, %quote(               *** Show lines connecting the points?);
	%put bars=1, %quote(                *** Show horizontal and vertical error bars?);
	%put barwidth=1, %quote(            *** Multiplier for the error bars.);
	%put log=1) %quote(                 *** Show messages in log?);
%MEND ShowMacroCall;

%if &help %then %do;
	%ShowMacroCall;
%end;
%else %if ~%CheckInputParameters(data=&data , var=&var , varRequired=1, otherRequired=&target,
								 requiredParamNames=data target= var=, macro=VARIABLEIMPACT) %then %do;
	%ShowMacroCall;
%end;
%else %do;
/************************************* MACRO STARTS ******************************************/
/* Local variables declaration */
%local i;
%local error nro_vars vari;
%local usingValue;
%local missing vartype;
%local annotate;		%* Flag that says if an annotate dataset is created or not;
%local out_name;
%local vi_gploti;		%* Plot statements to be used for the generation of the plot for each
						%* variable;
%local data_name annotate_name;		%* BE CAREFUL: the macro variable data_name is NOT the name
									%* of the dataset passed in the DATA parameter, it is the
									%* the name of the dataset used in the data= option of the
									%* PROC GPLOT statement used to produce the plots;
%* Macro variables used in the generation of the gplot statement necessary to generate the plot
%* for each variable;
%local annotateopt title title2 plotst interpolopt vaxisopt;
%local axis1 axis2 symbol1 footnote1 footnote2;

%SetSASOptions;

%* Showing input parameters;
%if &log %then %do;
	%put;
	%put VARIABLEIMPACT: Macro starts;
	%put;
	%put VARIABLEIMPACT: Input parameters:;
	%put VARIABLEIMPACT: - Input dataset = %quote(&data);
	%put VARIABLEIMPACT: - target = %quote(       &target);
	%put VARIABLEIMPACT: - var = %quote(          &var);
	%put VARIABLEIMPACT: - event = %quote(        &event);
	%put VARIABLEIMPACT: - condition= %quote(     &condition);
	%put VARIABLEIMPACT: - value = %quote(        &value);
	%put VARIABLEIMPACT: - groups = %quote(       &groups);
	%put VARIABLEIMPACT: - groupsize = %quote(    &groupsize);
	%put VARIABLEIMPACT: - percentiles = %quote(  &percentiles);
	%put VARIABLEIMPACT: - out = %quote(          &out);
	%put VARIABLEIMPACT: - plot = %quote(         &plot);
	%put VARIABLEIMPACT: - plotWhat = %quote(     &plotWhat);
	%put VARIABLEIMPACT: - pointlabel = %quote(   &pointlabel);
	%put VARIABLEIMPACT: - pointlabels = %quote(  &pointlabels);
	%put VARIABLEIMPACT: - lines = %quote(        &lines);
	%put VARIABLEIMPACT: - bars = %quote(         &bars);
	%put VARIABLEIMPACT: - barwidth = %quote(     &barwidth);
	%put VARIABLEIMPACT: - log = %quote(          &log);
	%put;
%end;

/*----------------------------------- Parsing input parameters ------------------------------*/
%*** TARGET=;
%let vartype = %GetVarType(&data, &target);
%if %upcase(&vartype) = C %then
	%let missing = "";
%else %if %upcase(&vartype) = N %then
	%let missing = .;

%*** VAR=;
%let var = %GetVarList(&data, var=&var, log=0);
%let nro_vars = %GetNroElements(&var);

%*** OUT=;
%if %quote(&out) ~= %then %do;
	%let out_name = %scan(&out, 1, '(');
	%* Initialize the global macro variable containing the plot statements necessary to do the plots
	%* in the future (which is used only when an output dataset is requested);
	%global vi_gplot;
	%let vi_gplot = ;
	%* Delete output dataset if it exists because later I do an append on it;
	proc datasets nolist;
		delete 	_VariableImpact_means_
				_VariableImpact_anno_;
	quit;
%end;

%*** BARS= and OUT=;
%* Flag that says whether to create or not an annotate dataset;
%* This flag is TRUE when BARS=1 or when an output dataset is requested.
%* The second condition is because the bars may not be wanted in the plots generated
%* by the current call to the macro but they may be wanted if the plots want to be done later;
%if &bars or %quote(&out) ~= %then	
	%let annotate = 1;
%else
	%let annotate = 0;
/*-------------------------------------------------------------------------------------------*/

%* Read in input dataset, keep only analysis variables and create target 0/1 variable to
%* ease computations;
data _VariableImpact_data_(keep=_vi_obs_ _target_ &var);
	set &data;
	%* Remove the missing values of TARGET;
	if &target ~= &missing;
	%* Note that I assume that the possible values of TARGET are only two!!!;
	if &target = &event then
		_target_ = 1;
	else
		_target_ = 0;
	%* The observation number is used when parameter CONDITION= is not empty in order to be
	%* able to merge;
	_vi_obs_ = _N_;
run;

%* Remove labels and formats from input variables:
%* Labels because they get transferred to the statistics computed on them below.
%* Formats because all statistics computed below on the input variables are going to be placed into the same column...
%* If the format is not the same on the different variables the format of the first variable will define the format
%* for the statistics columns in the output dataset!
%* For example, analyzing integer and real variables at the same time, will remove the decimal
%* places of the real variables in the output dataset!);
proc datasets nolist;
	modify _VariableImpact_data_;
	attrib &var label=" ";
	attrib &var format=;
quit;

*% Categorize the predictor variables;
%if &log %then
	%put VARIABLEIMPACT: Categorizing independent variables...;
%if %quote(&condition) = %then %do;
	%* DM-2016/02/15: Changed call from %Categorize to %CategorizePercentiles which holdds the
	%* original version of the %Categorize macro before its refactoring to a much simpler version
	%* that uses PROC RANK (and which therefore does not accept a given set of percentile values
	%* on which the groups should be computed);
	%CategorizePercentiles(_VariableImpact_data_, var=&var, value=, suffix=_,
				groups=&groups, groupsize=&groupsize, percentiles=&percentiles, log=0);
	%** Note that the suffix used for the categorized variables is kept as short as possible
	%** in order to diminish the problems with long variable names. In any case, the macro
	%** %Categorize creates temporary variables that add the suffix _mean (when VALUE=MEAN)
	%** to the categorized variable, so the problem may still occur;
%end;
%else
	%do i = 1 %to &nro_vars;
		%let vari = %scan(&var, &i, ' ');
		%CategorizePercentiles(_VariableImpact_data_(where=(&vari &condition)), var=&vari, value=,
					suffix=_, groups=&groups, groupsize=&groupsize, percentiles=&percentiles,
					out=_VariableImpact_cat_i_(keep=_vi_obs_ &vari._), log=0);
		%* Merging with _VariableImpact_data_, so that the observations that do not satisfy
		%* the CONDITION get a missing value into the categorized variable;
		data _VariableImpact_data_;
			merge _VariableImpact_data_ _VariableImpact_cat_i_;
			by _vi_obs_;
		run;
	%end;

%do i = 1 %to &nro_vars;
	%let vari = %scan(&var, &i, ' ');

	%if &log %then %do;
		%put;
		%put VARIABLEIMPACT: Analyzing variable %upcase(&vari)...;
	%end;

	%* Compute average of target variable and input variable for each group of categorized input variable
	%* as well as min and max of input variable in each categorized value;
	%Means(	_VariableImpact_data_, by=&vari._, var=_target_ &vari, stat=%RemoveRepeated(mean n min max &value, log=0),
			out=_VariableImpact_means_i_(keep=%if %quote(&value) = %then %do; &vari._ %end; %else %do; &vari._&value %end;
											  _target__mean _target__n &vari._min &vari._max
										 rename=(_target__mean=p
												 _target__n=n
												 %if %quote(&value) = %then %do; &vari._=value %end; %else %do; &vari._&value=value %end;
												 &vari._min=min
												 &vari._max=max)), log=0);
		%** Notes:
		%** - The by variable &vari._ is the variable created above by the macro %Categorize
		%** containing the categorized values of &vari.
		%** - The macro %RemoveRepeated is used in the STAT= option of %Means to avoid
		%** problems when &value = mean, in the sense that there will be multiple variables
		%** with the mean, and this causes an error in the renaming process;
	%* Compute logit;
	data _VariableImpact_means_i_(keep=var value min max n p logit p_lower p_upper logit_lower logit_upper)
		 %if &annotate %then _VariableImpact_anno_i_(keep=var value min max p logit p_lower p_upper logit_lower logit_upper);;
		format var value min max n p p_lower p_upper logit logit_lower logit_upper;
		set _VariableImpact_means_i_;
		length var $32;
		retain var "&vari";
		format p p_lower p_upper percent7.1;
		%* Indicate whether the category number or a statistic is used for each category of the input variables;
		%if %quote(&value) = %then %do;
		label value = "category";
		%end;
		%else %do;
		label value = "&value";
		%end;
		if p ~= 0 and p ~= 1 then
			se = sqrt(p*(1-p)/n);
		else
			se = 0;
		p_lower = p - &barwidth*se;
		p_upper = p + &barwidth*se;
		if p ~= 0 and p ~= 1 then do;
			logit = log(p / (1-p));
			if 0 < p_lower < 1 then logit_lower = log(p_lower / (1 - p_lower));
			else logit_lower = .;
			if 0 < p_upper < 1 then logit_upper = log(p_upper / (1 - p_upper));
			else logit_upper = .;
		end;
		else do;
			logit = .;
			logit_lower = .;
			logit_upper = .;
		end;
	run;
	proc append base=_VariableImpact_means_ data=_VariableImpact_means_i_ FORCE;
	run;

	%* Annotate dataset;
	%if &annotate %then %do;
		data _VariableImpact_anno_i_(keep=var xsys ysys x y function text color line);
			format var xsys ysys x y function text color line;
			set _VariableImpact_anno_i_;
			length function $8 text $8;
			retain xsys "2" ysys "2" color "blue";
			retain x y;

			%* Horizontal bars;
			%if %upcase(&plotWhat) = LOGIT %then %do;
				y = logit;
			%end;
			%else %do;
				y = p;
			%end;
			x = min;
			function = "move"; text = ""; line = .; output;
			function = "symbol"; text = "|"; line = .; output;
			x = max;
			function = "draw"; ; text = ""; line = 1; output;
			function = "symbol"; text = "|"; line = .; output;

			%* Vertical bars;
			x = value;
			%if %upcase(&plotWhat) = LOGIT %then %do;
				y = logit_lower;
			%end;
			%else %do;
				y = p_lower;
			%end;
			function = "move"; text = ""; line = .; output;
			function = "symbol"; text = "plus"; line = .; output;
			%if %upcase(&plotWhat) = LOGIT %then %do;
				y = logit_upper;
			%end;
			%else %do;
				y = p_upper;
			%end;
			function = "draw"; ; text = ""; line = 1; output;
			function = "symbol"; text = "plus"; line = .; output;
		run;
		%* Append the current annotate dataset to the annotate dataset for all variables;
		proc append base=_VariableImpact_anno_ data=_VariableImpact_anno_i_ FORCE;
		run;
	%end;
%end;

/*------------------------------------ Output dataset ---------------------------------------*/
%* NOTE: The output dataset needs to be created before doing the plots, because if an output
%* dataset is requested, the plot statement necessary to create the plots later is stored in
%* the macro variable VI_GPLOTST, and the name of the output dataset needs to be used in the
%* gplot statement there;
%if %quote(&out) ~= %then %do;
	%* Output dataset with the data necessary to make the plots;
	data &out;
		set _VariableImpact_means_;
	run;
	%if &log %then %do;
		%put;
		%put VARIABLEIMPACT: Output dataset %upcase(&out_name) created with the data necessary;
		%put VARIABLEIMPACT: to produce the plots.;
	%end;

	%* Annotate dataset to use optionally in the plot;
	data &out_name._anno;
		set _VariableImpact_anno_;
	run;
	%if &log %then %do;
		%put;
		%put VARIABLEIMPACT: Annotate dataset %upcase(&out_name._anno) created with the data necessary;
		%put VARIABLEIMPACT: to annotate the plots generated by the dataset %upcase(&out_name).;
		%put;
		%put VARIABLEIMPACT: Macro variable VI_GPLOT created with the statements necessary to produce;
		%put VARIABLEIMPACT: the variable impact plots for each variable.;
	%end;

	%let data_name = &out_name;
	%let annotate_name = &out_name._anno;
%end;
%else %do;
	%let data_name = _VariableImpact_means_;
	%let annotate_name = _VariableImpact_anno_;
%end;
/*-------------------------------------------------------------------------------------------*/

/*--------------------------------------- Plots ---------------------------------------------*/
%if &plot or %quote(&out) ~= %then %do;
	%DefineSymbols(log=0);
	%do i = 1 %to &nro_vars;
		%let vari = %scan(&var, &i, ' ');

		%* Symbol definition: point labels;
		%if &lines %then
			%let interpolopt = interpol=join;
		%else
			%let interpolopt = interpol=none;
		%if &pointlabels %then %do;
			%let symbol1 = symbol1 pointlabel=("#&pointlabel") &interpolopt;
		%end;
		%else
			%let symbol1 = symbol1 &interpolopt;
		%* Axis definition;
		%let usingValue = ;
		%if %quote(&value) ~= %then
			%let usingValue = %quote( using &value value);
		%let axis1 = axis1 label=("&vari (categorized&usingValue)");
		%if &bars %then %do;
			%* Axis1;
			%GetStat(&annotate_name(where=(upcase(var)=upcase("&vari"))), var=x, stat=min, name=_xmin_, log=0);
			%GetStat(&annotate_name(where=(upcase(var)=upcase("&vari"))), var=x, stat=max, name=_xmax_, log=0);
			%let axis1 = axis1 order=(%SetAxis(&_xmin_, &_xmax_, 10));

			%* Axis2;
			%GetStat(&annotate_name(where=(upcase(var)=upcase("&vari"))), var=y, stat=min, name=_ymin_, log=0);
			%GetStat(&annotate_name(where=(upcase(var)=upcase("&vari"))), var=y, stat=max, name=_ymax_, log=0);
			%let axis2 = axis2 order=(%SetAxis(&_ymin_, &_ymax_, 10));

			%let footnote1 = footnote1 "Horizontal bar limits are min and max of variable in each group";
			%let footnote2 = footnote2 "Vertical bar limits are +- &barwidth*SE bounds for %upcase(&plotwhat)";
			%let vaxisopt = vaxis=axis2;

			%* Delete global variables generated by %GetStat;
			%symdel _xmin_ _xmax_ _ymin_ _ymax_;
			quit;	%* To avoid problems with %symdel;
		%end;
		%else %do;
			%let axis2 = ;
			%let footnote = ;
			%let vaxisopt = ;
		%end;

		%* Plot statement used to do the plot for current variable;
		%* Annotate option;
		%let annotateopt = ;
		%if &bars %then
			%let annotateopt = annotate=&annotate_name(where=(upcase(var)=upcase("&vari")));
		%* Plot statement;
		%let title2 = title2 "DATASET = %upcase(&data)";
		%if %upcase(&plotWhat) = LOGIT %then %do;
			%let title = title "Logit(Pr(%upcase(&target)=&event)) vs. categorized %upcase(&vari)";
			%let plotst = plot logit*value=1;
		%end;
		%else %do;
			%let title = title "Pr(%upcase(&target)=&event) vs. categorized %upcase(&vari)";
			%let plotst = plot p*value=1;
		%end;
		%let vi_gploti = %str(
		* Variable impact plot for variable %upcase(&vari);
		&axis1;
		&axis2;
		&symbol1;
		&footnote1;
		&footnote2;
		proc gplot data=&data_name(where=(upcase(var) = upcase("&vari"))) &annotateopt;
			&title; &title2;
			&plotst / haxis=axis1 &vaxisopt;
		run;
		quit;
		symbol1 pointlabel=none interpol=none;
		title;
		footnote;);
		%* Do the plot;
		%if &plot %then %do;
			&vi_gploti;
		%end;

		%* Create plot statement necessary to do ALL the plots by the user in the future;
		%if %quote(&out) ~= %then
			%let vi_gplot = &vi_gplot
							&vi_gploti;
	%end;
%end;
/*-------------------------------------------------------------------------------------------*/

proc datasets nolist;
	delete	_VariableImpact_anno_
			_VariableImpact_anno_i_
			_VariableImpact_cat_i_
			_VariableImpact_data_
			_VariableImpact_means_
			_VariableImpact_means_i_;
quit;

%if &log %then %do;
	%put;
	%put VARIABLEIMPACT: Macro ends;
	%put;
%end;

%ResetSASOptions;
%end;	%* %if ~%CheckInputParameters;
%MEND VariableImpact;
