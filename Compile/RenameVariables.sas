/* MACRO %RenameVariables
Version: 1.02
Author: Daniel Mastropietro
Created: 09-Sep-05
Modified: 19-Aug-06

DESCRIPTION:
This macro renames variables in a dataset.
The rename information is taken either from a SAS table or from an external file (CSV, TXT, worksheet)
containing two columns, one with the list of the old names and the other with the list
of the new names of the variables to be renamed.

USAGE:
%RenameVariables(
	data,			*** Input dataset where the rename is to be carried out
	rename=,		*** Name of the dataset containing the rename information
	import=0,		*** Whether to import the rename information from the file specified in FILE=
	file=,			*** Name of the file to be imported containing the rename information
	type=CSV,		*** Type of file specified in FILE=
	old=original,	*** Name of the variable in dataset RENAME= containing the old variable names
	new=new,		*** Name of the variable in dataset RENAME= containing the new variable names
	norepeated=1,	*** Whether there might be repeated names in the new variable names list
	notes=0,		*** Show SAS notes in the log?
	log=1);			*** Show messages in the log?

REQUIRED PARAMETERS:
- data:			Input dataset where the rename is to be carried out.
				Data options CANNOT be specified.

OPTIONAL PARAMETERS:
- rename:		Name of the dataset containing the rename information.
				This dataset either exists or is created by importing the rename information
				from the file specified in FILE=.
				The dataset must have at least 2 columns, containing the old (current) variable
				names and the new vavriable names to be assigned.
				If a variable does not have to be renamed, it can still appear in the dataset.
				In such cases, the new name must be either empty or the same as the current
				name of the variable.
				The names of the columns containing the old (current) variable names and the
				new variable names are specified in parameters OLD= and NEW= respectively.
				See below.
				default: _RENAME_

- import:		Whether to import the rename information from the file specified in FILE=
				or take the information from the dataset specified in RENAME=.
				Possible values: 0 => Take the information from the dataset RENAME=
								 1 => Import the information from the file FILE=
				default: 0

- file:			External file from which the old and new names are read.
				The name must be enclosed in quotes.

- type:			Type of the external file (e.g. CSV).

- old:			Name of the variable in the RENAME= dataset containing the list of the old
				(current) variable names.
				default: old

- new:			Name of the variable in the RENAME= dataset containing the list of the new
				variable names.
				default: new

- norepeated:	States whether there might be repeated names in the list of new variable
				names to be defined with the rename statement.
				When NOREPEATED=1, the process may take a long time if the number of variables
				to be renamed is large (say larger than 50) because the check for repeated names
				is time consuming.
				Checking for repeated names allows knowing the number of repeated names that
				exist among the list of new variable names.
				Possible values: 0 => There are no repeated names in the new variable names list
								 1 => There might be repeated names in the new variable names list
				default: 0

- notes:		Show SAS notes in the log?
				Possible values: 0 => Yes, 1 => No
				default: 0

- log:			Show messages in the log?
				Possible values: 0 => Yes, 1 => No
				default: 1

NOTES:
1.- The old and new names are stored in an external file that is imported. This file can
be Excel, CSV or TXT.
This file is typically generated by exporting to Excel the information produced by a
PROC CONTENTS run on the dataset of interest and then editing this informataion in Excel
to define the new variable names.

2.- Even if NOTES=0, SAS notes generated by the PROC DATASETS used to rename the variables
are shown.

OTHER MACROS AND MODULES USED IN THIS MACRO:
- %CreateInteractions
- %GetLibraryName
- %GetNroElements
- %Import
- %Puts
- %RemoveRepeated
- %RemoveSuffix
- %ResetSASOptions
- %SetSASOptions
*/
&rsubmit;
%MACRO RenameVariables(	data,
						rename=_rename_,
						import=0,
						file=, 
						type=CSV,
						old=original,
						new=new,
						norepeated=1,
						notes=0,
						log=1)
	/ store des="Renames variables in a dataset as specified in a table stored in an external file or in a dataset";
%local oldlist newlist newlist_norep;
%local nro_newlist nro_newlist_norep;
%local data_name library;
%local renamedat renamestr_new _rename_;
%local notes_option;

%SetSASOptions(notes=&notes);

%if &log %then %do;
	%put;
	%put RENAMEVARIABLES: Macro starts;
	%put;
%end;

%* Read file with old and new names;
%if &import %then %do;
	%put RENAMEVARIABLES: Importing the rename information from;
	%put RENAMEVARIABLES: &file of type %upcase(&type)...;
	%Import(&rename, &file, type=&type);
%end;
%let renamedat = &rename;

%if %quote(&renamedat) = %then %do;
	%put RENAMEVARIABLES: ERROR - No rename information was specified.;
	%put RENAMEVARIABLES: Either the RENAME= parameter or IMPORT=1 and the FILE= paramater must be passed.;
%end;
%else %if not %sysfunc(exist(&renamedat)) %then
	%put RENAMEVARIABLES: ERROR - Dataset %upcase(&renamedat) with the rename information does not exist.;
%else %do;
	%* Read old and new names;
	%* The dataset is filtered to the records that have a value for both the OLD
	%* and the NEW variable and in addition to the records that have different values
	%* in the OLD and NEW variables, so that the new name is different from the old name
	%* (this comparison is NOT case sensitive since the UPCASE values are compared).
	%* This is necessary in order to generate the renames properly and not to have
	%* errors shown in the log;
	data _rv_rename_;
		set &renamedat;
		where not missing(&old) and not missing(&new) and upcase(&old) ~= upcase(&new);
	run;
	%if &log %then
		%put RENAMEVARIABLES: Reading the old and the new names from dataset %upcase(&renamedat)...;
	%let oldlist = %MakeListFromVar(_rv_rename_, var=&old, log=0);
	%let newlist = %MakeListFromVar(_rv_rename_, var=&new, log=0);

	%* Build the RENAME strings;
	%* Note that the separator used is the semicolon. This is to enable showing in the logs what renames 
	%* are going to be carried out by leaving a space before and after the = sign, for better readability
	%* of the old and new names of the variables;
	%if &log %then
		%put RENAMEVARIABLES: Creating the rename strings...;
	%CreateInteractions(var=&oldlist, with=&newlist, join=%quote( = ), allInteractions=0, sep=;, macrovar=renamestr, log=0);
	%if &log %then %do;
		%put RENAMEVARIABLES: The following is the list of renames to be applied:;
		%puts(%quote(&renamestr), sep=;);
		%put;
	%end;

	%* If NOREPEATED=0 check whether there are repeated names in the new list (this parameter is taken into
	%* account before doing this check because the RemoveRepeated macro may take too long if there are too
	%* many names);
	%if ~&norepeated %then %do;
		%let newlist_norep = %RemoveRepeated(&newlist, log=0);
		%let nro_newlist_norep = %GetNroElements(&newlist_norep);
		%let nro_newlist = %GetNroElements(&newlist);
		%if &nro_newlist_norep < &nro_newlist %then %do;
			%put RENAMEVARIABLES: WARNING - Some of the new variable names are repeated.;
			%put RENAMEVARIABLES: The number of repeated variable names is %eval(&nro_newlist - &nro_newlist_norep).;
		%end;
	%end;

	%* Rename;
	%let library = %GetLibraryName(&data);
	%if %index(&data, .) %then
		%let data_name = %scan(&data, 2, '.');
	%else
		%let data_name = &data;
	%* Turn on the NOTES option so that the user can see which variables are actually renamed
	%* (this is useful in case there are repeate variable names among the NEW names and the
	%* rename process is interrupted);
	options notes;
	proc datasets library=&library nolist;
		modify &data_name;
		%* The rename string created in &renamestr is changed by removing the semicolons after each NEW name
		%* so that when an error occurs when a NEW name is repeated the whole rename process does not stop but
		%* continues renaming the variables that can be renamed;
		rename %RemoveSuffix(%quote(&renamestr), ;, log=0);
	quit;
	proc datasets nolist;
		delete _rv_rename_;
	quit;
	options &notes_option;
%end;

%if &log %then %do;
	%put;
	%put RENAMEVARIABLES: Macro ends;
	%put;
%end;

%ResetSASOptions;
%MEND RenameVariables;
