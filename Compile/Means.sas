/* MACRO %Means
Version: 	1.19
Author: 	Daniel Mastropietro
Created: 	01-Sep-2000
Modified: 	10-Jan-2018 (previous: 28-Nov-2017, 06-Sep-2017, 24-Aug-2017, 21-Apr-2016, 04-Feb-2016)

DESCRIPTION:
Runs PROC MEANS with the statements and options "usually" used. The supported statements are:
- format
- class
- by
- id
- weight
- output

In addition to specifying these statements, the following options can be specified:
- The statistics to be computed.
- The names to be given to the variables containing the requested statistics in the output
dataset.
- Suffixes to be used when naming the variables containing the requested statistics in the
output dataset.
- An option specyfing whether or not the result of the procedure should be shown in the
output window.
- Options used in the PROC MEANS statement
- Additional options used in the OUTPUT statement.
- Request transposition of the output dataset generated by PROC MEANS so that the results
are distributed one row per analysis variable and one column per statistic requested.

In order to avoid writing some statements repeatedly (as is the case when using PROC MEANS
directly) this macro drops by default the variables _TYPE_ and _FREQ_ from the output dataset,
which are seldom useful.

USAGE:
%Means(
	data,			*** Input dataset
	out=, 			*** Output dataset
	var=_NUMERIC_, *** Variables on which statistics are computed
	format=,		*** PROC MEANS FORMAT statement
	id=, 			*** PROC MEANS ID statement
	by=, 			*** PROC MEANS BY statement
	class=, 		*** PROC MEANS CLASS statement
	types=,			*** PROC MEANS TYPES statement
	stat=n nmiss mean stddev cv skewness kurtosis min p1 p5 p10 p25 p50 p75 p90 p95 p99 max,
					*** Statistics to be computed on the variables
	name=,  		*** Names to be used for the requested statistics
	prefix=, 		*** Prefixes to be added to the above names
	suffix=, 		*** Suffixes to be added to the above names
	weight=, 		*** PROC MEANS WEIGHT statement
	options=,		*** PROC MEANS statement options
	optionsout=,	*** Additional PROC MEANS OUTPUT statement options
	transpose=0,	*** Transpose the output dataset to have one row per variable?
	namevar=var,	*** If transpose=1, name for the column with the variable names
					*** in the output dataset
	droptypefreq=1,	*** Drop the _TYPE_AND _FREQ_ variables from the output dataset?
	sortinplace=1,	*** Sort the input dataset in place when there are BY variables?
	noprint=1, 		*** Show results in the output window?
	nolabel=1,		*** Avoid labels on variables with the summary statistics?
	notes=1,		*** Show SAS notes in the log?
	log=1);			*** Show messages in the log?

REQUESTED PARAMETERS:
- data:			Input dataset. It can contain additional options as in any data=
				option in SAS (such as keep=, where=, etc.).

OPTIONAL PARAMETERS:
- out:			Output dataset containing the statistics requested.
				It can contain additional options as in any data= option in SAS.
				By default, if this parameter is passed, the 'noprint'
				option is used so that nothing is shown in the output window. 
				If no value is passed, the results are shown in the output window.
				The format of the output dataset depends on the value of parameter
				'transpose'.	
				- If transpose=0:
					There is one row for each by variable combination and one
					column for each variable-statistic combination. (See examples below)
				- If transpose=1:
					The output is in table format, mimicing the format used by PROC MEANS
					to show the results in the output window. That is:
					- if no by variables are used, there is one row for each variable
					listed in 'var' and one column for each statistic listed in 'stat',
					plus one column for the variable name corresponding to each row.
					- if by variables are used, the structure just described is repeated
					for each combination of the values of the by variables. In this case,
					the first columns of the dataset are the by variables and the
					column containing the variable names.
				Notes:
				- The name for the column containing the variable names is specified
				in parameter 'namevar' (see below when parameter 'namevar' is described).
				- Variables _TYPE_ and _FREQ_ generated by PROC MEANS are dropped by default
				from the output dataset.

- var:			List of variables on which the requested statistics are
				computed.
				default: _numeric_, i.e. all numeric variables are used

- format:		Format definition for the variables.

- class:		List of variables to be used in the CLASS statement.

- by:			List of variables to be used in the BY statement.

- id:			List of variables to be used in the ID statement.

- stat:			List of statistics to be computed on the variables listed
				in 'var'.
				default: n nmiss mean stddev cv skewness kurtosis min p1 p5 p10 p25 p50 p75 p90 p95 p99 max

- name:			List of names to be given to each statistic specified in the 'stat'
				parameter.
				There are 3 ways of using this parameter:
				(1) By giving a list of as many names as statistics produced
				(the number of statistics produced is the product of the number
				of variables in 'var' and the number of statistics in 'stat').
				The order in which the names should be specified is by first cycling
				on the variable names and then on the statistic keywords. For ex:
				If 'var=x y' and 'stat=mean std', meaningful names are specified with
				'name=xmean ymean xstd ystd'.
				(2) By using it in conjunction with parameter 'prefix' or 'suffix', in
				which case parameter 'name' must contain as many names as variables
				specified in 'var'. See description of parameter 'suffix' for an
				explanation of how the names are built up.
				(3) Do not specify any value. In this case, the names for the requested
				statistics are formed as follows:
				- if parameter 'prefix' or 'suffix' is specified, follow their naming rule.
				- otherwise, the AUTONAME option in the output statement of PROC MEANS
				is used.
				This parameter has no effect if 'out' is empty or transpose=1.
				SEE EXAMPLES BELOW.

- prefix:		List of prefixes to be used for naming the requested statistics.
				This parameter has no effect if 'out' is empty or transpose=1.
				See parameter 'suffix' for an explanation of how it works.
				SEE EXAMPLES BELOW.

- suffix:		List of suffixes to be used for naming the requested statistics.
				The list must contain as many suffixes as statistics requested in 'stat'.
				It works as follows:
				- If parameter 'name' is empty, a suffix is added to each variable
				name given in 'var' corresponding to each statistic requested in
				'stat'.
				- If parameter 'name' is specified, the suffix is added to each name
				in 'name' instead of to each variable name in 'var'. (Parameter 'name'
				must contain as many names as variables specified in 'var'.)
				This parameter has no effect if 'out' is empty or transpose=1.
				SEE EXAMPLES BELOW.

- weight:		Variable to be used in the WEIGHT statement.

- options:		Options to be used in the PROC MEANS statement.

- optionsout:	Options to be used in the OUTPUT statement of PROC MEANS after the
				'/' symbol.

- transpose:	Indicates whether the output dataset containing the statistics is
				transposed from the default output generated by PROC MEANS.
				It has no effect if parameter 'out' is empty.
				See 'out' for details.
				Possible values are: 0 => do not transpose, 1 => transpose
				default: 0 (i.e. the dataset is not transposed)

- namevar:		Name to use for the column containing the variable names in the output
				dataset when TRANSPOSE=1. It has no effect if parameter 'out' is empty.
				default: _var_

- droptypefreq:	Indicates whether to drop the _TYPE_ and _FREQ_ variables from the output
				dataset.
				Possible values: 0 => No, 1 => Yes.
				default: 1

- sortinplace:	When there are BY variables, it indicates whether the input dataset should
				be sorted in place, as opposed to creating a local copy of the sorted data.
				This is useful when we want to leverage the call to the %Means macro
				to sort the input dataset. It also may come handy with large datasets
				that are processed on a database so that no copy of the data is created
				locally.
				default: 0

- noprint:		Parameter that establishes whether the results of PROC MEANS should
				be shown in the output window or not.
				Possible values: 0 => Show, 1 => Do not show.
				default: depends on parameter 'out'. If 'out' is empty the results
				are shown, otherwise they are not.

- nolabel		Indicates whether not to use labels on the variables with the summary
				statistics. The reason is that by default PROC MEANS transfers the
				labels of the analyzed variables ot the summary statistic variables
				and this may be a little cumbersome since we will not be able to
				distinguish the summary statistics among them and from the original
				variable.
				Possible values: 0 => No, 1 => Yes.
				default: 1

- notes:		Indicates whether to show SAS notes in the log.
				The notes are shown only for the PROC MEANS step.
				Possible values: 0 => No, 1 => Yes.
				default: 1

- log:			Indicates whether to show messages in the log.
				Possible values: 0 => No, 1 => Yes.
				default: 1

NOTES:
1.- The variables _TYPE_ and _FREQ_ are dropped from the output dataset (if one is requested).
In order to keep them run PROC MEANS directly.

2.- When TRANSPOSE=1, there should not be any variables appearing both in the BY= and the ID=, or
in the CLASS= and the ID= parameter specifications. Otherwise, the results from the computed
statistics will be most likely incorrect.
(This is because when the same variables appear in the BY and ID statements, or in the CLASS and
ID statements, SAS creates new variables in the output dataset generated by PROC MEANS (e.g. GROUP2,
if the BY variable and the ID variable is GROUP), and this messes up the transpose process.
The solution to this is not simple, that is why a note on this is shown.)

OTHER MACROS AND MODULES USED IN THIS MACRO:
- %Callmacro
- %CheckInputParameters
- %ExecTimeStart
- %ExecTimeStop
- %GetDataOptions
- %GetLibraryName
- %GetNobs
- %GetNroElements
- %GetVarList
- %GetVarNames
- %SetSASOptions
- %RemoveFromList
- %ResetSASOptions

SEE ALSO:
- %FreqMult

EXAMPLES:
1.- %Means(A , out=A_stats , var=x y , stat=mean std cv, transpose=1, namevar=variable);
Computes the mean, standard deviation and coeff. of variation for variables x and y, and 
stores them in dataset A_STATS. Since parameter transpose=1, the output dataset has 2 rows
and 4 columns:
- rows: the first contains the statistics for variable x; the second row contains the
statistics for variable y.
- columns: the column names are: variable mean std cv
No results are shown in the output window.

This call is useful to have the output in table format. It is not useful to merge with
input dataset to include summary statistics.

2.- %Means(A , out=A_stats , var=x y , stat=mean std cv , suffix=_mean _std _cv , noprint=0);
Computes the mean, standard deviation and coeff. of variation for variables x and y, and 
stores them in dataset A_STATS. Since parameter transpose is not passed, it is assumed to be 0
and thus the output dataset has 1 row and 6 columns. The columns are named:
x_mean y_mean x_std y_std x_cv y_cv.
Since noprint=0, the results are shown in the output window.

3.- %Means(A , out=A_stats , var=x y , stat=mean std cv , name=varX varY , suffix=_mean _std _cv);
Same as in Ex. 2, except the names of the variables containing the requested statistics
in the output dataset are: varX_mean varY_mean varX_std varY_std varX_cv varY_cv.

4.- %Means(A , out=A_stats , var=x1 x2 , stat=mean std cv , prefix=mean_ std_ cv_ , noprint=0);
Same as Ex. 2, except the variable names are:
mean_x1 mean_x2 std_x1 std_x2 cv_x1 cv_x2.
Note that the use of a prefix is useful when the variables analyzed are many and are named
with a number at the end. For example if the analysis variables are x1, x2, x3, ..., x10,
using prefix=mean_ allows using the expression mean_x1-mean_x10 to reference the means
for all variables, x1 thru x10.
Since noprint=0, the results are shown in the output window.

5.- AVOIDING SUFFIX GENERATION IN A SINGLE STATISTIC COMPUTED
%Means(A , out=A_stats , var=x1 x2 , stat=sum , names=x1 x2 , suffix= , noprint=1);
Note that it is necessary to use the option NAMES=, since it is not enough to specify an empty
suffix. Specifying only the latter would generate the names for the statistics automatically
with the AUTONAME option of PROC MEANS.
Thus, this macro call will generate the dataset A_STATS with variables X1, X2 with the
sums of X1 and X2, respectively.

APPLICATIONS:
1.- Generate a table of statistics for several variables in form of a readable table, one statistic
per column and one analysis variable per row. To do this, use the TRANSPOSE=1 option.
Ex: Computing the distribution of a set of numeric variables.
%Means(
	A, 
	var=x y z w t s,
	out=Distribution,
	transpose=1
);
*/
&rsubmit;
%MACRO Means(data, 	out=, var=_numeric_, format=, id=, by=, class=, types=,
			 stat=n nmiss mean stddev cv skewness kurtosis min p1 p5 p10 p25 p50 p75 p90 p95 p99 max, stats=, name=, names=, 
			 prefix=, suffix=, weight=, noprint=1, nolabel=1, options=, optionsout=, transpose=0, namevar=_var_,
			 droptypefreq=1, sortinplace=0, notes=1, log=1, help=0)
		/ store des="Runs a PROC MEANS with added features such as transposing the output to increase readability";

%* These variables are declared here because they are needed before the call to %CheckInputParameters;
%local by_orig;
%local data_options;
%local error;

/*----- Macro to display usage -----*/
%MACRO ShowMacroCall;
	%put;
	%put MEANS: The macro call is as follows:;
	%put;
	%put %nrstr(%Means%();
	%put data , (REQUIRED) %quote(      *** Input dataset.);
	%put var=_NUMERIC_ , %quote(        *** Analysis variables.);
	%put out= , %quote(                 *** Output dataset.);
	%put format= , %quote(              *** PROC MEANS FORMAT statement.);
	%put id= , %quote(                  *** PROC MEANS ID statement.);
	%put by= , %quote(                  *** PROC MEANS BY statement.);
	%put class= , %quote(               *** PROC MEANS CLASS statement.);
	%put types= , %quote(               *** PROC MEANS TYPES statement.);
	%put weight= , %quote(              *** PROC MEANS WEIGHT statement.);
	%put stat= , %quote(                *** Statistics to be computed on the analysis variables.);
	%put name= , %quote(                *** Names to be used for the requested statistics.);
	%put prefix= , %quote(              *** Prefixes to be added to the above names.);
	%put suffix= , %quote(              *** Suffixes to be added to the above names.);
	%put options= ,	%quote(             *** Options for the PROC MEANS statement.);
	%put optionsout= ,	%quote(         *** Additional options for the OUTPUT statement.);
	%put transpose=0 , %quote(          *** Transpose the output dataset into one row per variable and);
	%put %quote(                        *** and one column per statistic computed?);
	%put namevar= ,	%quote(             *** If TRANSPOSE=1, name for the column with the variable names);
	%put %quote(                        *** in the output dataset.);
	%put droptypefreq=1 , %quote(       *** Drop the _TYPE_ and _FREQ_ variables?);
	%put sortinplace=0 , %quote(        *** Sort the input dataset in place when the BY= parameter is specified?);
	%put noprint=1 , %quote(            *** Show results in output window?);
	%put nolabel=1 , %quote(            *** Avoid labels on variables with the summary statistics?);
	%put notes=1 , %quote(              *** Show SAS notes in the log?);
	%put log=1) %quote(                 *** Show messages in the log?);
%MEND ShowMacroCall;
/*----- Macro to display usage -----*/

%if &help %then %do;
	%ShowMacroCall;
%end;
%else %do;
%* Checking existence of input datasets and existence of variables in datasets;
%let error = 0;
%let data_options = %GetDataOptions(%quote(&data));
%if ~%index(%quote(%upcase(&data_options)), RENAME) %then %do;
	%* The check is done only if there is no RENAME option in the specification of the dataset;
	%if %quote(&by) ~= %then %do;
		%let by_orig = &by;
		%* Remove from the list of BY variables the keyword DESCENDING in case it exists,
		%* otherwise the macro %CheckInputParameters will report the non-existence of variable DESCENDING...;
		%let by = %RemoveFromList(%quote(&by), descending, log=0);
	%end;
	%if ~%CheckInputParameters(data=&data , var=&var , check=class by id weight, macro=MEANS) %then %do;
		%ShowMacroCall;
		%let error = 1;
	%end;
	%* Re-establish the content of the BY parameter, in case the DESCENDING option existed, which was removed above
	%* before calling %CheckInputParameters;
	%else
		%let by = &by_orig;
%end;
%if ~&error %then %do;
/************************************* MACRO STARTS ******************************************/
%local j k;
%local byvars _name_ _newname_;
%local nro_byvars nro_cols nro_vars nro_stats out_library out_name out_options;
%local _prefix_ _stat_ _suffix_;
%local data_name label varnames;
%local label_option;
%local notes_option;
%local nobs nvars;	%*** Number of obs. and number of vars in output dataset;
%* Statements for the MEANS procedure;
%local byst classst formatst idst typesst droptypefreqst noprintst outputst statst weightst;

%let notes_option = %sysfunc(getoption(notes));
%SetSASOptions;
%ExecTimeStart;
%let label_option = %sysfunc(getoption(label));
%if &nolabel %then %do;
	options nolabel;
%end;

%* Showing input parameters;
%if &log %then %do;
	%put;
	%put MEANS: Macro starts;
	%put;
	%put MEANS: Input parameters:;
	%put MEANS: - Input dataset = %quote(&data);
	%put MEANS: - var = %quote(          &var);
	%put MEANS: - out = %quote(          &out);
	%put MEANS: - format = %quote(       &format);
	%put MEANS: - class = %quote(        &class);
	%put MEANS: - by = %quote(           &by);
	%put MEANS: - id = %quote(           &id);
	%put MEANS: - weight = %quote(       &weight);
	%put MEANS: - stat = %quote(         &stat);
	%put MEANS: - name = %quote(         &name);
	%put MEANS: - prefix = %quote(       &prefix);
	%put MEANS: - suffix = %quote(       &suffix);
	%put MEANS: - options = %quote(      &options);
	%put MEANS: - optionsout = %quote(   &optionsout);
	%put MEANS: - transpose = %quote(    &transpose);
	%put MEANS: - namevar = %quote(      &namevar);
	%put MEANS: - droptypefreq = %quote( &droptypefreq);
	%put MEANS: - sortinplace = %quote(  &sortinplace);
	%put MEANS: - noprint = %quote(      &noprint);
	%put MEANS: - notes = %quote(        &notes);
	%put MEANS: - log = %quote(          &log);
	%put;
%end;

/*-------------------------------- Parse input parameters -----------------------------------*/
%* Remove keyword DESCENDING if it exists in parameter BY=. I store the list of
%* by variables in macro variable &byvars which is only used below in the KEEP=
%* option when reading in the input dataset;
%let byvars = %RemoveFromList(&by, descending, log=0);

%*** Converting &var into a blank-separated list of variables;
%let var = %RemoveRepeated(%GetVarList(&data , var=&var, log=0), log=0);
%let nro_vars = %GetNroElements(&var);

%* FORMAT;
%let formatst =;
%if %quote(&format) ~= %then
	%let formatst = format &format;

%* BY;
%let byst =;
%if %quote(&by) ~= %then %do;
	%let byst = by &by;
	%if &log %then %do;
		%put;
		%if &sortinplace %then
			%put MEANS: Sorting dataset (IN PLACE --use sortinplace=0 if this is undesired)...;
		%else
			%put MEANS: Sorting dataset...;
	%end;
	proc sort data=&data %if ~&sortinplace %then %do; out=_Means_data_ %end;;
		&byst;
	run;
	%if ~&sortinplace %then
		%let data = _Means_data_;
%end;

%* CLASS;
%let classst =;
%let typesst =;
%if %quote(&class) ~= %then %do;
	%let class = %GetVarList(&data , var=&class, log=0);
	%let classst = class &class;
	%let typesst = types &types;
%end;

%* ID;
%let idst =;
%if %quote(&id) ~= %then %do;
	%let id = %GetVarList(&data , var=&id, log=0);
	%let idst = id &id;
%end;

%* STAT and NAME;
%if %quote(&stats) ~= and %quote(&stat) = %then
	%let stat = &stats;
%if %quote(&names) ~= and %quote(&name) = %then
	%let name = &names;
%if %quote(&stat) ~= %then %do;
	%let nro_stats = %GetNroElements(&stat);
	%let statst =;
	%do j = 1 %to &nro_stats;
		%let _stat_ = %scan(&stat , &j , ' ');
		%let _name_ = ;
		%let _prefix_ = %scan(&prefix , &j , ' ');
		%let _suffix_ = %scan(&suffix , &j , ' ');
		%do k = 1 %to &nro_vars;
			%if %quote(&name) ~= %then
				%if %quote(&prefix) = and %quote(&suffix) = %then
					%let _newname_ = %scan(&name , %eval((&j-1)*&nro_vars + &k), ' ');
					%*** All names are explicitly specified;
				%else
					%let _newname_ = %scan(&name , &k , ' ');
					%*** The names are generated by the names specified in name= (as many as vars)
					%*** and the suffixes specified in suffix= (as many as stats requested);
			%else
				%if %quote(&prefix) ~= or %quote(&suffix) ~= %then %do;
					%let _newname_ = %scan(&var , &k , ' ');
					%*** Only generate the variable names for the stats if either name=, prefix or suffix=
					%*** options are specified. If none of these is specified, the names given to
					%*** the statistics variables are generated automatically with autoname;
				%end;
			%let _newname_ = &_prefix_&_newname_&_suffix_;
			%let _name_ = &_name_ &_newname_;
		%end;
		%let statst = &statst %str(&_stat_=&_name_);
	%end;
%end;
%else %do;
	%let stat = mean;
	%let nro_stats = 1;
	%let _name_ = ;
	%do k = 1 %to &nro_vars;
		%let _name_ = &_name_ %scan(&name , &k);
	%end;
	%let statst = %str(mean=&_name_);
%end;

%* WEIGHT;
%let weightst = ;
%if %quote(&weight) ~= %then
	%let weightst = weight &weight;

%* DROPTYPEFREQ;
%let droptypefreqst =;
%if %quote(&droptypefreq) %then
	%let droptypefreqst = %quote(drop=_TYPE_ _FREQ_);

%let outputst =;
%let out_name = %scan(&out , 1 , '(');
%* Get the library name (because I use the output dataset name in a PROC DATASET statement and
%* if the output dataset name comes with a library name, there will be an error);
%let out_library = %GetLibraryName(&out_name);
%let out_options = %GetDataOptions(&out);
%if %quote(&out) ~= %then %do;
	%if &name = %then
		%let optionsout = &optionsout autoname;
	%let outputst = %str(output out=&out_name(&out_options &droptypefreqst) &statst / &optionsout);
%end;
%else
	%let noprint = 0;

%* NOPRINT;
%let noprintst =;
%if %quote(&noprint) %then
	%let noprintst = noprint;
/*-------------------------------- Parse input parameters -----------------------------------*/


%if &log %then
	%put MEANS: Computing statistics requested...;
%* Restore notes option;
%if &notes %then %do;
options &notes_option;
%end;
proc means data=&data &options &stat &noprintst;
	&formatst;
	&byst;
	&classst;
	&idst;
	var &var;
	&typesst;
	&weightst;
	&outputst;
run;
options nonotes;

%*** Transposing the output dataset so that it shows the results as they appear on the screen;
%if %quote(&out) ~= and &transpose %then %do;
	%if &log %then %do;
		%put;
		%put MEANS: Transposing output dataset...;
	%end;
	%let nro_byvars = %GetNroElements(&by);
	%let nro_cols = %eval(&nro_vars*&nro_stats);
	%let varnames = %GetVarNames(&out_name);
	%* Remove variable from the output dataset that do not correspond to the statistics produced
	%* for the variables analyzed;
	%if %quote(&by) ~= %then %do;
		%let varnames = %RemoveFromList(&varnames, &by, log=0);
	%end;
	%if %quote(&class) ~= %then %do;
		%let varnames = %RemoveFromList(&varnames, &class, log=0);
	%end;
	%if %quote(&id) ~= %then %do;
		%let varnames = %RemoveFromList(&varnames, &id, log=0);
	%end;
	%if %quote(&weight) ~= %then %do;
		%let varnames = %RemoveFromList(&varnames, &weight, log=0);
	%end;
	%* Read label stored in the &out dataset;
	proc contents data=&out_name out=_Means_contents_(keep=memlabel) noprint;
	run;
	data _Means_contents_;
		set _Means_contents_(obs=1);
		call symput ('label', trim(left(memlabel)));
	run;
	data _Means_out_(label="&label");
		format &by &class &id &namevar &stat;
		length &namevar $32;
		set &out_name;
		array _cols_ &varnames;		%*** Column names in the output dataset to be transposed;
		array _newcols_ &stat;		%*** Column names in the transposed dataset;
		do _indvar_ = 1 to &nro_vars;					%*** Cycle over the variables;
			&namevar = scan("&var", _indvar_, ' ');		%*** Get current variable name;
			do _indstat_ = 1 to &nro_stats;				%*** Cycle over the statistics requested;
				_newcols_(_indstat_) = _cols_(&nro_vars*(_indstat_ - 1) + _indvar_);
			end;
			output;
		end;
		keep &by &class &id &namevar &stat;
	run;

	%if %quote(%upcase(&out_library)) = WORK %then %do;
		proc datasets nolist;
			%if %index(&out_name, .) > 0 %then %do;
			delete %scan(&out_name, 2, '.');	%* Remove the library name (WORK) if it exists in the output dataset name;
			change _Means_out_ = %scan(&out_name, 2, '.');
			%end;
			%else %do; 
			delete &out_name;
			change _Means_out_ = &out_name;
			%end;
		quit;
	%end;
	%else %do;
		data &out_name(label="&label");
			set _Means_out_;
		run;
		proc datasets nolist;
			delete _Means_out_;
		quit;
	%end;
%end;

%if %quote(&out) ~= and &log %then %do;
	%callmacro(getnobs, &out_name return=1, nobs nvars);
	%if ~&notes or &transpose %then %do;
		%put;
		%put MEANS: Dataset %upcase(&out_name) created with &nobs observations and &nvars variables.;
		%put;
	%end;
%end;

proc datasets nolist;
	delete  %if ~&sortinplace %then %do; _Means_data_ %end;
			_Means_out_
			_Means_contents_;
quit;

%if &log %then %do;
	%put;
	%put MEANS: Macro ends;
	%put;
%end;

options &label_option;
%ExecTimeStop;
%ResetSASOptions;

%end;	%* %if ~&error;

%end;	%* %if &help;
%MEND Means;
