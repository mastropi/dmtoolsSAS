/* EvaluationChart-Test.sas
Created: 		04-Jun-2012
Modified: 		18-Jun-2012
Author: 		Daniel Mastropietro
Description: 	Tests run on macro %EvaluationChart.
*/

/*======================================== 2012/06/04 =======================================*/
*** Test the generation of evaluation charts for a multilevel target and allow for grouping of several levels;
*** Dataset for analysis: simulated data created by the PP231 - ECI project;
*** Target variable: X_CLIENTE_TIPOCONSUMIDOR;
*** See also EM project: pp231_2EDA01_EMSimulate
*** ;

/*---------------------------------------- 1. Startup ---------------------------------------*/
libname eci "C:\Daniel\Data\pp231_ECI";
%let data = eci.em_compras_climescat;		** 25,626 obs;
%let dataname = %scan(&data, 2, .);
%let target = X_CLIENTE_TIPOCONSUMIDOR;

%let targetFormat = $_binary;
%let targetInformat = &targetFormat;
proc format;
	value &targetFormat(default=10)
			'1-Barato'		= '1'
			' ' 			= ' '
			other			= '0';
	* Other formats that I may be using below for the target variable;
	value $ v2groups
		'1-Barato'  = 1
		other 		= 0
	;
	value $ v2last
		'1-Barato' 	= 1
		'2-Medio' 	= 4
		'3-Caro' 	= 2
		'4-ALL' 	= 3
	;
run;

proc freq data=&data;
	format &target $v2groups.;
	tables &target;
run;
** 1 = 37.5%;

proc freq data=&data;
	tables &target;
run;
/*---------------------------------------- 1. Startup ---------------------------------------*/


/*------------------------------------ 2. Data preparation ----------------------------------*/
*** Take a sample of the input dataset and make a numeric copy of the target variable
*** (as %EvaluationChart at this point requires that the target be numeric;
proc surveyselect 	data=&data(keep=A_CLIENTE_ID &target N_CLIENTE_EDAD V_CLIENTE_INGRESOS V_PRODUCTO_COSTE)
					out=tofit
					samprate=10
					seed=1717;
run;
* Partition into TRAIN and VALID (the partition is identified by the SELECTED variable);
proc surveyselect data=tofit out=tofit samprate=60 seed=1313 OUTALL;
run;

* Make a copy of the target variable (as numeric) which is set to missing on the validation dataset;
* Create a new variable storing the variable number for identification purposes;
data tofit;
	format obs;
	set tofit;
	obs = _N_;
	y = input(compress(substr(&target,1,1)), 1.);
	if ~selected then
		y = .;
run;

*** Create a model for multilevel target;
proc logistic data=tofit;
	model y = N_CLIENTE_EDAD V_CLIENTE_INGRESOS V_PRODUCTO_COSTE / link=glogit;	** LINK=GLOGIT is used so that the target variable is considered as NOMINAL (as opposed to ORDINAL);
	output out=tofit_pred_raw pred=p;
run;
* Create one column for each level of the target variable with the predicted probabilities;
* This implies transposing the dataset by using the %Transpose macro, as PROC TRANSPOSE creates a new dataset with as many
* observations as there are in the input dataset!!;
* The same result can be accomplished by using PROC TRANSPOSE and then filtering on the records with not misisng _NAME_
* which is the column containing the name of the variable being transposed;
* I actually use this option here!;
proc transpose data=tofit_pred_raw out=tofit_pred prefix=p;
	copy selected &target y N_CLIENTE_EDAD V_CLIENTE_INGRESOS V_PRODUCTO_COSTE;
	id _LEVEL_;
	by obs;
	var p;
run;
data tofit_pred;
	set tofit_pred;
	where not missing(_NAME_);
	drop _NAME_ _LABEL_;
run;

* Fill in the target values for the VALID sample for evaluation purposes;
data tofit_pred;
	set tofit_pred;
	y = input(compress(substr(&target,1,1)),1.);
run;

* Split the dataset into 2 datasets in order to test the call to %EvaluationChart with multiple datasets;
data tofit_pred0 tofit_pred1;
	set tofit_pred;
	if selected = 0 then output tofit_pred0;
	if selected = 1 then output tofit_pred1;
run;
/*------------------------------------ 2. Data preparation ----------------------------------*/
/*======================================== 2012/06/04 =======================================*/



/*-------------------------------- 3. MAIN: Evaluation Chart --------------------------------*/
*** NOTES TO TAKE INTO ACCOUNT WHEN CHANGING THE MACRO:
*** - More than one dataset is allowed in the list of input datasets!
*** ;
libname ec_test "c:\sas\macros\tests\EvaluationChart";

/*======================================== 2012/06/04 =======================================*/
*** 3A.- REFERENCE RUN: to be used as reference for checking that the macro still works fine;
*** Note that relevant output is saved into: C:\SAS\Macros\tests\EvaluationChart as follows:
*** - Log file: ec_test01_1v2_ref.log
*** - Output datasets generated by the macro:
*** 	EC_TEST01_1V2_REF.SAS7BDAT
*** 	EC_TEST01_1V2_REF_STAT.SAS7BDAT
*** ;
options mprint notes;
%EvaluationChart(
	tofit_pred(where=(y in (1,2))),
	target=y,
	score=p1,
	by=selected,
	event=1,
	model=LR,
	groups=20,
	chart=gains,
	plot=1,
	pointlabels=0,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST.EC_TEST01_1V2_REF,
	outstat=EC_TEST.EC_TEST01_1V2_REF_STAT,
	print=1,
	log=1
);
options nomprint notes;


*** 3B.- Test with multilevel NUMERIC target;
options mprint;
%EvaluationChart(
	tofit_pred,
	target=y,
	score=p1,
	by=selected,
	event=1,
	model=LR,
	groups=20,
	chart=gains,
	plot=1,
	pointlabels=0,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST.EC_TEST02_ML1,
	outstat=EC_TEST.EC_TEST02_ML1_STAT,
	print=1,
	log=1
);
options nomprint;

*** 3C.- Test with multilevel CHARACTER target;
options mprint;
%EvaluationChart(
	tofit_pred,
	target=&target,
	score=p1,
	by=selected,
	event='1-Barato',
	model=LR,
	groups=20,
	chart=gains,
	plot=1,
	pointlabels=0,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST.EC_TEST02_ML2,
	outstat=EC_TEST.EC_TEST02_ML2_STAT,
	print=1,
	log=1
);
options nomprint;

*** 3D.- Test with multilevel CHARACTER target and MULTILEVEL EVENT OF INTEREST
*** using 2 score variables (p1 and p2, that are the scores of each level of interest) to construct
*** the new score to use for the graphs;
options mprint;
%EvaluationChart(
	tofit_pred(where=(selected<=1)),
	target=&target,
	score=p1 p2,
	by=selected,
	event='1-Barato' '2-Medio',
	model=LR,
	step=6,
	groups=15,
/*	percentiles=23 50 73 97,*/
	chart=GAINS,
	plot=1,
	overlay=0,
/*	best=0,*/
	pointlabels=1,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=ec_test.EC_TEST03_ML3,
	outstat=ec_test.EC_TEST03_ML3_STAT,
	print=1,
	log=1
);
options nomprint;

* Call using multiple datasets instead of BY variables;
options mprint;
%EvaluationChart(
	tofit_pred0 tofit_pred1,
	target=&target,
	score=p1 p2,
	event="1-Barato" "2-Medio",
	model=LR,
	groups=20,
	chart=GAINS,
	plot=1,
	overlay=1,
	best=1,
	pointlabels=0,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=ec_test.EC_TEST03_ML4,
	outstat=ec_test.EC_TEST03_ML4_STAT,
	print=1,
	log=1
);
options nomprint;

*** Check when the model is DT (instead of LR);
* Prepare the data;
%Categorize(tofit_pred, out=tofit_pred_DT, groups=20, var=p1 p2 p3 p4, suffix=_leaf, value=mean, both=1, log=1);
proc freq data=tofit_pred_DT;
	tables p1_leaf*p1_leaf_mean / list;
run;
* Test setting several leaves to have p = 0;
data tofit_pred_dt1;
	set tofit_pred_dt;
	if p1_leaf <= 7 then p1_leaf_mean = 0;
run;
proc freq data=tofit_pred_dt1;
	tables p1_leaf_mean;
run;
** THINGS STOP WORKING WITH THESE DATA!!;
* Run the Chart assuming the categorized p's are of a DT model;
options mprint;
%EvaluationChart(
	tofit_pred_DT1,
	target=&target,
/*	by=selected,*/
	score=p1_leaf_mean,
	event='1-Barato',
	model=DT,
	leaf=p1_leaf,
	groups=20,
	chart=GAINS,
	plot=1,
	overlay=0,
	best=1,
	pointlabels=0,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST05_DT1_DT,
	outstat=EC_TEST05_DT1_DT_STAT,
	print=1,
	log=1
);
options nomprint;
** Incorrect chart (messy);
/*======================================== 2012/06/04 =======================================*/


/*======================================== 2012/06/27 =======================================*/
*** Checks for version v3.01, which completely changed the way the Lift/Gains is computed.
*** Essentially the new method is based on computing the Gains on the CONTINUOUS score
*** and THEN CATEGORIZING on the percentile values specified by the user;

* (1a) Indicate that the model is DT;
options mprint;
%EvaluationChart(
	tofit_pred_DT1,
	target=&target,
/*	by=selected,*/
	score=p1_leaf_mean,
	event='1-Barato',
	model=DT,
	leaf=p1_leaf,
/*	groups=20,*/
	chart=GAINS,
	plot=1,
	overlay=0,
	best=1,
	pointlabels=1,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST05_DT1_DT,
	outstat=EC_TEST05_DT1_DT_STAT,
	print=1,
	log=1
);
options nomprint;

* (1b) Indicate that the model is LR (just for testing purposes);
options mprint;
%EvaluationChart(
	tofit_pred_DT1,
	target=&target,
/*	by=selected,*/
	score=p1_leaf_mean,
	event='1-Barato',
	model=LR,
/*	leaf=p1_leaf,*/
	groups=20,
	chart=GAINS,
	plot=1,
	overlay=0,
	best=1,
	pointlabels=0,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST05_DT1_LR,
	outstat=EC_TEST05_DT1_LR_STAT,
	print=1,
	log=1
);
options nomprint;
** OK: the only problem here is that the Event Gains and Non-Event Gains go OUT of the Best Curve bounds
** and maybe this is still reasonable?;

* (2a) Original model TOFIT_PRED;
options mprint;
%EvaluationChart(
	tofit_pred,
	target=&target,
/*	by=selected,*/
	score=p1,
	event='1-Barato',
	model=LR,
/*	leaf=p1_leaf,*/
	groups=20,
	chart=GAINS,
	plot=1,
	overlay=0,
	best=1,
	pointlabels=0,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST06_LR,
	outstat=EC_TEST06_LR_STAT,
	print=1,
	log=1
);
options nomprint;

* (2b) Indicate that the model is DT --> this should give an almost CONTINUOUS Gains Chart...;
options mprint;
%EvaluationChart(
	tofit_pred,
	target=&target,
/*	by=selected,*/
	score=p1,
	event='1-Barato',
	model=DT,
/*	leaf=p1_leaf,*/		/* there is no LEAF value because the model is NOT DT to begin with! */
	groups=20,
	chart=GAINS,
	plot=1,
	overlay=0,
	best=1,
	pointlabels=0,
	points=0,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST06_DT,
	outstat=EC_TEST06_DT_STAT,
	print=1,
	log=1
);
options nomprint;
** OK: the result here is WRONG because it does NOT make sense to treat CONTINUOUS score values as if
** they were discrete! In fact, the result is wrong because the MERGE operation between the _EC_GainsEvent_
** dataset and the _EC_GainsNonEvent_ dataset is done by QUANTILE_ID, assuming that the QUANTILE_ID values
** are the same in both dataset (which is the case when MODEL=LR because the score has been quantized), but
** they are most likely NOT the same when the score is CONTINUOUS and no quantization of its values is performed
** (like here, because we specified MODEL=DT which implies "treat the original score values as discrete values
** and do NOT quantize them);

* (2c) Check the case with multilevel event values;
options mprint;
%EvaluationChart(
	tofit_pred,
	target=&target,
/*	by=selected,*/
	score=p1 p2,
	event='1-Barato' '2-Medio',
	model=LR,
	groups=20,
	chart=GAINS,
	plot=1,
	overlay=0,
	best=1,
	pointlabels=1,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST07_ML,
	outstat=EC_TEST07_ML_STAT,
	print=1,
	log=1
);
options nomprint;

* (2d) Add BY groups;
options mprint;
%EvaluationChart(
	tofit_pred,
	target=&target,
	by=selected,
	score=p2,
	event='2-Medio',
	model=LR,
	groups=20,
	chart=GAINS,
	plot=1,
	overlay=1,
	best=0,
	pointlabels=0,
	points=0,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST08_ML_BYGROUP,
	outstat=EC_TEST08_ML_BYGROUP_STAT,
	print=1,
	log=1
);
options nomprint;

* (2e) Use two datasets as groups;
options mprint;
%EvaluationChart(
	tofit_pred0 tofit_pred1,
	target=&target,
	score=p2,
	event='2-Medio',
	model=LR,
	groups=50,
	chart=GAINS,
	plot=1,
	overlay=1,
	best=1,
	pointlabels=1,
	points=0,
	legend=1,
	bands=1,
	confidence=0.90,
	out=EC_TEST08_ML_TWODS,
	outstat=EC_TEST08_ML_TWODS_STAT,
	print=1,
	log=1
);
options nomprint;

%* (3a) LIFT with bands;
options mprint;
%EvaluationChart(
	tofit_pred,
	target=&target,
/*	by=selected,*/
	score=p1,
	event='1-Barato',
	model=LR,
	groups=20,
	chart=LIFT,
	plot=1,
	overlay=0,
	best=1,
	pointlabels=1,
	points=1,
	legend=1,
	bands=1,
	confidence=0.95,
	out=EC_TEST08_ML_LIFT,
	outstat=EC_TEST08_ML_LIFT_STAT,
	print=1,
	log=1
);
options nomprint;
** OK!;

options mprint;
%EvaluationChart(
	tofit_pred0 tofit_pred1,
	target=&target,
	score=p2,
	event='2-Medio',
	model=LR,
	groups=50,
	chart=LIFT,
	plot=1,
	overlay=1,
	best=1,
	pointlabels=0,
	points=0,
	legend=1,
	bands=1,
	confidence=0.95,
	libformat=ECI,
	out=EC_TEST08_ML_LIFT_TWODS,
	outstat=EC_TEST08_ML_LIFT_TWODS_STAT,
	print=1,
	log=1
);
options nomprint;
/*======================================== 2012/06/27 =======================================*/


/*======================================== 2012/07/05 =======================================*/
*** Test models generated by EM and see if the evaluation chart generated by the macro coincide with them;
libname emws4 "C:\Daniel\SAS\SASEM\Projects7.1\pp231_2EDA01_EMSimulate\Workspaces\EMWS4";
** NOTE: the library name should be the same as the one given in the EM project because I will read the data
** from views and the views refer to the EMWS4 library;

data em_train;
	set emws4.tree_train;
run;
data em_valid;
	set emws4.tree_validate;
run;

*** Input parameters;
* Data to analyze;
%let by = ;										* List of BY variables for group processing (only allowed when SAMPLES= has only ONE listed sample type);
* Model characteristis;
%let target = X_CLIENTE_TIPOCONSUMIDOR;			* Target variable;
%let score = P_X_CLIENTE_TIPOCONSUMID4_ALL;		* List of score variables defining the final score;
%let event = '4-ALL';							* List of target values defining the event of interest;
%let model = DT;								* Type of model (LR/DT). It is used to define whether the score is Interval-valued (LR = LogisticRegression) or Ordinal-valued (DT = Decision Tree);
%let leaf = _NODE_;								* For MODEL=DT case, it defines the variable name containing the identifier of the Decision Tree leaf;
* Plotting layout;
%let plot = 1;									* Create the Evaluation Chart plot (0/1)?;
%let chart = Gains;								* Type of Evaluation Chart (Gains/Lift). Gains refers to showing % Captured Response;
%let step = ;									* Step size defining the percentiles to plot (<100). STEP= has precedence over GROUPS=;
%let groups = 20;								* Number of bins to use for the score variable for generating the Evaluation Chart (>1);
%let percentiles = ;							* List of percentile values defining the right limits of the score variable bins (<100). PERCENTILES= has precedence over STEP=;
%let overlay = 1;								* Overlay Evaluation Curves on the same graph (0/1)?;
%let best = 0;									* Show Best Curves (0/1)?;
%let pointlabels = 0;							* Show point labels with the number of obs in each group (0/1)?;
%let points = 1;								* Show point markers (0/1)?;
%let legend = 1;								* Show Legend (0/1)?;
%let bands = 1;									* Show Confidence Bands for Gains Chart (0/1)?;
%let confidence = 0.95;							* Confidence Bands level (<1);
* Output datasets;
%let out = EM_OUTPLOT;							* Name of the output dataset containing the chart data;
%let outstat = EM_OUTSTAT;						* Name of the output dataset containing the model performance measure statistics (KS, Gini, etc.);
* Other parameters;
%let print = 1;									* Show KS and Gini index in the output window (0/1)?;
%let log = 1;									* Show messages in the log (0/1)?;

%EvaluationChart(
	em_train em_valid
	,target			= &target
	,score			= &score
	,by				= &by
	,event			= &event
	,model			= &model
	,leaf			= &leaf
	,step			= &step
	,groups			= &groups
	,percentiles	= &percentiles
	,chart			= &chart
	,plot			= &plot
	,overlay		= &overlay
	,best			= &best
	,pointlabels	= &pointlabels
	,points			= &points
	,legend			= &legend
	,bands			= &bands
	,confidence		= &confidence
	,out			= &out
	,outstat		= &outstat
	,print			= &print
	,log			= &log
);
** OK! Verified!;
/*======================================== 2012/07/05 =======================================*/
/*-------------------------------- 3. MAIN: Evaluation Chart --------------------------------*/
